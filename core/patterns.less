@patterns-all: ~"snow", clouds, squares, stripes, stripes-vertical;

@subtle-patterns: rain, bricks, dot-texture, triangle-texture;

// @patterns-all: ~"snow";

// @subtle-patterns: ~"snow";

@pattern-size-base: unit(@font-size);
@double-pattern-size-base: @pattern-size-base*2;

@four-pattern-size-base: @pattern-size-base*4;
@five-pattern-size-base: @pattern-size-base*5;
@eight-pattern-size-base: @pattern-size-base*8;

@rain: escape("<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 2.646 4.233' height='16' width='10'><rect ry='.269' rx='.279' y='-.529' x='-.265' height='1.058' width='.529' id='a' opacity='1' fill='#000' stroke-width='0' stroke-linecap='round' fill-opacity='@{fill-opacity}'/><use height='100%' width='100%' transform='translate(0 4.233)' xlink:href='#a'/><use height='100%' width='100%' transform='translate(1.323 2.117)' xlink:href='#a'/><use height='100%' width='100%' transform='translate(2.646)' xlink:href='#a'/><use height='100%' width='100%' transform='translate(2.646 4.233)' xlink:href='#a'/></svg>");

@snow: escape("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 21.167 13.229' height='@{five-pattern-size-base}' width='@{eight-pattern-size-base}'><g fill='@{white}' fill-opacity='@{fill-opacity}'><circle cx='13.759' cy='4.498' r='1.323'/><circle cy='1.587' cx='8.202' r='.794'/><circle r='.794' cx='4.498' cy='9.26'/><circle r='.794' cx='18.521' cy='11.377'/><circle cy='11.112' cx='12.171' r='.529'/><circle r='.529' cx='18.521' cy='5.027'/><circle r='.529' cx='8.731' cy='6.614'/><circle r='.529' cx='3.175' cy='3.969'/><circle r='.529' cx='.794' cy='12.435'/></g></svg>");

@clouds: escape("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 52.917 42.333' height='160' width='200'><path d='M28.07 15.841a4.194 4.194 0 00-3.804 2.422 2.936 2.936 0 00-.824-.12 2.936 2.936 0 00-2.926 2.729 1.68 1.68 0 00-1.674 1.68 1.68 1.68 0 001.68 1.677h11.74a2.517 2.517 0 002.516-2.517 2.517 2.517 0 00-2.517-2.517 2.517 2.517 0 00-.082 0 4.194 4.194 0 00-4.109-3.354z' fill='@{white}' fill-opacity='@{fill-opacity}'/></svg>");

@bricks: escape("<svg xmlns='http://www.w3.org/2000/svg' width='80' height='48'><path d='M19 0v11H0v26h19v11h2V37h38v11h2V37h19V11H61V0h-2v11H21V0h-2zM1 13h38v22H1V13zm40 0h38v22H41V13z' fill='@{white}' fill-opacity='@{fill-opacity}'/></svg>");

@stripes: escape("<svg xmlns='http://www.w3.org/2000/svg' width='80' height='50' viewBox='0 0 21.167 13.229'><path fill='@{tone}' opacity='@{fill-opacity}' d='M0 0h21.167v6.615H0z'/></svg>");

@stripes-vertical: escape("<svg xmlns='http://www.w3.org/2000/svg' width='80' height='50' viewBox='0 0 21.167 13.229'><path opacity='@{fill-opacity}' fill='@{tone}' d='M0 0h10.583v13.229H0z'/></svg>");

@squares: escape("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 3.175 3.175' height='12' width='12'><path opacity='@{fill-opacity}' fill='@{tone}' d='M0 0h1.587v1.587H0z'/></svg>");

@dot-texture: escape("<svg xmlns='http://www.w3.org/2000/svg' width='@{double-pattern-size-base}' height='@{pattern-size-base}' viewBox='0 0 3.175 1.588'><g fill='@{tone}' fill-opacity='@{fill-opacity}'><circle cx='.397' cy='.397' r='.397'/><circle r='.397' cy='.397' cx='1.191'/><circle r='.397' cy='.397' cx='1.984'/><circle cx='2.778' cy='.397' r='.397'/><circle r='.397' cy='1.191'/><circle cx='.794' cy='1.191' r='.397'/><circle cx='1.587' cy='1.191' r='.397'/><circle r='.397' cy='1.191' cx='2.381'/><circle cx='3.175' cy='1.191' r='.397'/></g></svg>");

@triangle-texture: escape("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 3.175 1.588' height='@{pattern-size-base}' width='@{double-pattern-size-base}'><g fill='@{tone}' fill-opacity='@{fill-opacity}'><path d='M1.317 1.194h-.92l.23-.399.23-.398.23.398zM2.312 1.194l-.23-.399-.23-.398h.92l-.23.398z'/></g></svg>");

@fg: black;
@fill-opacity: .16;


.output-patterns() {
    each(@patterns-all, {
        // this outputs everything in an escaped SVG format
        .invoke-pattern(@value);

        // this is just for the demo site
        // .@{value} {

        //     .set-color-random() {
        //         @potentials:    @red, @orange, @yellow, @olive, @green, @teal, @blue, @indigo, @purple, @violet;

        //         @length: length(@potentials);

        //         @random: `Math.random()`;
        //         @sc: ceil(@length*@random);
        //         @color-random: extract(@potentials, @sc);
        //     }

        //     .set-color-random();

        //     .pattern(@value; @color-random;);

        //     &::after {
        //         content: ".pattern(@{value}, @{color-random});";
        //     }
        // }
    });

    .invoke-pattern(@pattern-name) {
        // this makes the pattern name into a class, which sets the pattern as a background
        .@{pattern-name} { background-image: data-uri('image/svg+xml;charset=UTF-8', 'svg/@{pattern-name}.svg')}
    }
}

// .output-patterns();

.set-pattern(@pattern-name: @default-pattern) {
    
    // we use white instead of @white here to emulate lighten/darken

    // figure out which color to use for foreground
    @fg-base: contrast(@base-color, black, white);

    // escape it so it works in the SVG
    @fg: escape(@fg-base);

    // get the variable version of the given pattern name
    @pattern-base: @@pattern-name;

    // set the SVG as @background-image
    @background-image: url("data:image/svg+xml,@{pattern-base}");
}