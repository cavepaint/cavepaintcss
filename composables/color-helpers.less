// this creates all CSS properties and helpers for any color

.color-helpers(@color) {

    // how much the color helpers show up, relatively
    @effect: 90%;

    @brightened: mix(lighten(saturate(@color, 10%), 10%), @color, @effect);
    @dimmed: mix(desaturate(multiply(@shadow-color, @color), 16%), @color, @effect);
    
    @lightened: mix(softlight(@color, @white), @color, @effect);
    @darkened: mix(softlight(@color, black), @color, @effect);
    
    @base-contrast-ceiling: .set-contrast-ratio(@color, @white)[];
    @border-color: .set-lumafix(@color, @black, 75%)[];

    .text-color(@ceiling) when (@ceiling >= 3) {
        &:extend(.tint);
    }

    .text-color(@ceiling) when (default()) {
        &:extend(.shade);
    }

    .text-color(@base-contrast-ceiling);

    --h: round(hue(@color), 1);
    --s: round(saturation(@color), 1);
    --l: round(lightness(@color), 1);

    .light& { 
        @light-ceiling: .set-contrast-ratio(@lightened, @white)[];
        .text-color(@light-ceiling);
        --l: round(lightness(@lightened), 1);
    } 
        
    .dark& { 
        @dark-ceiling: .set-contrast-ratio(@darkened, @white)[];
        .text-color(@dark-ceiling);
        --l: round(lightness(@darkened), 1);
    }

    .bright& { 
        @bright-ceiling: .set-contrast-ratio(@brightened, @white)[];
        .text-color(@bright-ceiling);
        --s: round(saturation(@brightened), 1);
        --l: round(lightness(@brightened), 1);
    }

    .dim& { 
        @dim-ceiling: .set-contrast-ratio(@dimmed, @white)[];
        .text-color(@dim-ceiling);
        --s: round(saturation(@dimmed), 1);
        --l: round(lightness(@dimmed), 1);
    }
}

// warm

.set-warm-base() when (red(@base-color) > 128) {
    @warm-base: .set-lumafix(@orange, @yellow)[];
}

.set-warm-base() when (default()) {
    @warm-base: .set-lumafix(@red, @yellow)[];
}

@warm-base: .set-warm-base()[];
@warm-lumafix: .set-lumafix(@warm-base, @base-color, 25%)[];
@warm: .set-color(~"warm", @warm-lumafix, 0)[];
@warm-gradient: rgba(red(@warm), green(@warm), blue(@warm), @warm-bg-fill-opacity);
@warm-bg-fill-opacity: .2;

.warm {
    background-image: linear-gradient(var(--warm), var(--warm));
}

// cool 

.set-cool-base() when (blue(@base-color) > 128) {
    @cool-base: @cyan;
}

.set-cool-base() when (default()) {
    @cool-base: .set-lumafix(@blue, @cyan)[];
}

@cool-base: .set-cool-base()[];
@cool-lumafix: .set-lumafix(@cool-base, @base-color, 50%)[];
@cool: .set-color(~"cool", @cool-lumafix, 0)[];
@cool-gradient: rgba(red(@cool), green(@cool), blue(@cool), @cool-bg-fill-opacity);
@cool-bg-fill-opacity: .2;

.cool {
    background-image: linear-gradient(var(--cool), var(--cool));
}

// neutral 

.set-neutral-base() when (green(@base-color) > 128) {
    @neutral-base: .set-lumafix(@action, @cyan)[];
}

.set-neutral-base() when (default()) {
    @neutral-base: .set-lumafix(@action, @cyan)[];
}

@neutral-base: .set-neutral-base()[];
@neutral-lumafix: .set-lumafix(@neutral-base, @base-color, 50%)[];
@neutral: average(@neutral-lumafix, @action);
@neutral-gradient: rgba(red(@neutral), green(@neutral), blue(@neutral), @neutral-bg-fill-opacity);
@neutral-bg-fill-opacity: .1;

.neutral {
    background-image: linear-gradient(var(--neutral), var(--neutral));
}

// dull 

@dull-base: @gray;
@dull-lumafix: .set-average(@dull-base, desaturate(@action, 100%);)[];
@dull: .set-color(~"dull", @dull-lumafix, 0)[];
@dull-bg-fill-opacity: .3;
@dull-gradient: rgba(red(@dull), green(@dull), blue(@dull), @dull-bg-fill-opacity);

.dull {
    background-image: linear-gradient(var(--dull), var(--dull));
}
