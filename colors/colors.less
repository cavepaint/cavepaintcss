.set-color(@color-name, @base, @luma-modifier: 1/2, @ambient-modifier: 1, @outputs: false) {
	// @color-name: the name of the color, which will be the class name
	// @base: the base representative color
	// @luma-modifier: [0 - 1] how much the color is luma-matched to @base-color
	// @ambient-modifier: [.9 - 1.1 works best] how much the ambient light affects the color

	// generate the color
	@color-base: .set-lumafix(@base; @strength: @luma-modifier;)[];
	@contrast-ceiling: .set-contrast-ratio(@color, @white)[];

	// figure out if we're tinting or shading for the base color
	@white-text: boolean(@contrast-ceiling >= 3);
	@black-text: boolean(@contrast-ceiling < 3);

	// operations for the color variants
	// @lightened: softlight(@color, @white);
	// @darkened: softlight(@color, @black);
	@lightened: mix(softlight(@white, @color), @color, 30%);
	@darkened: mix(softlight(@black, @color), @color, 30%);
	@brightened: lighten(overlay(@color, @color), 5%);

	// find ceilings for .light and .dark variants
	@light-ceiling: .set-contrast-ratio(@lightened, @white)[];
	@dark-ceiling: .set-contrast-ratio(@darkened, @white)[];
	@bright-ceiling: .set-contrast-ratio(@brightened, @white)[];

	// sometimes it needs white text when darkened
	@white-text-dark: boolean(@dark-ceiling >= 3);

	// or black text when lightened
	@black-text-light: boolean(@light-ceiling < 3);

	// bright can go either way
	@white-text-bright: boolean(@bright-ceiling >= 3);
	@black-text-bright: boolean(@bright-ceiling < 3);

	// apply ambient lighting
	@color: mix(@color-base, overlay(@ambient, @color-base), @ambient-mix*@ambient-modifier);

	.@{color-name} when (@outputs = true) {
		background-color: @color;
		border-color: .set-lumafix(@color, @black, 50%)[];

		& when (@white-text) { 
			&:extend(.tint);
		}

		& when (@black-text) { 
			&:extend(.shade);
		}
	}

	.light.@{color-name} when (@outputs = true) {
		background-color: @lightened;
		border-color: .set-lumafix(@lightened, @black, 50%)[];
	}

	.light.@{color-name} when (@outputs = true) and (@black-text-light) and not (@black-text) { 
		&:extend(.shade);
	}

	.dark.@{color-name} when (@outputs = true) {
		background-color: @darkened;
		border-color: .set-lumafix(@darkened, @black, 50%)[];
	}

	.dark.@{color-name} when (@outputs = true) and (@white-text-dark) and not (@white-text) { 
		&:extend(.tint);
	}

	.bright.@{color-name} when (@outputs = true) {
		background-color: @brightened;
		border-color: .set-lumafix(@brightened, @black, 50%)[];
	}

	.bright.@{color-name} when (@outputs = true) and (@black-text-bright) { 
		&:extend(.shade);
	}

	.bright.@{color-name} when (@outputs = true) and (@white-text-bright) { 
		&:extend(.tint);
	}
}



// used in building other colors
@import "white";
@import "black";
@import "ambient";
@import "core";

// // default colors
@import "gray";
// @import "brown";
// @import "magenta";
// @import "lavender";
// @import "cream";
// @import "charcoal";
// @import "crimson";
// @import "clover";
// @import "cobalt";
// @import "graphite";
// @import "ruby";
// @import "onyx";
// @import "pewter";
// @import "gunmetal";
// @import "hotpink";
// @import "neongreen";
// @import "electricblue";
// @import "royalpurple";
// @import "lemon";
// @import "lime";
// @import "tangerine";
// @import "grapefruit";

// // semantic colors
@import "action";
@import "reaction";
@import "info";
@import "warning";
@import "success";
@import "failure";
@import "default";

// @import "warm";
// @import "cool";
// @import "neutral";
@import "accent";

// @import "highlight";