@import (reference) "set-contrast-ratio";
@import (reference) "set-tone";

// .contrast(
//         @property: color; 
//         @compare: @main-background; 
//         @standard: @text-contrast;        
//         @mode: auto;
//         ) {
//     // adds tone to background color until contrast standard is met
//     // uses result as text color (or @property if specified)

//     // @property: the CSS property to be output with a contrasting color
//     // @compare: the comparison color, of which the output will be a version
//     // @standard: how much lighter or darker the output is than @compare, as a contrast ratio
//     // @mode: auto: pick which works best | tint: add white | shade: add black
    
//     // to get a border color a bit darker than background
//     // .contrast(border-color, @background, 1.5, shade);

//     // to get a background that contrasts with white text
//     // .contrast(background-color, white, 4.5;);

//     // Note: this outputs one rule, affecting the first argument (which usually
//     // is NOT a variable)

//     @iterations: 40;
    
//     // this expression describes the contrasting color that will be used for text
//     @contrast: mix(@tone, @compare, @index*2.5%);
    
//     @index: 1;

//     // tone is the color mixed into the background to lighten or darken the text
    
//     .tone(@compare) when (@mode = auto) { .set-tone(@compare);}
    
//     .tone(@compare) when (@mode = tint) { @tone: white;}

//     .tone(@compare) when (@mode = shade) { @tone: black;}

//     // .set-contrast-ceiling(@compare);
//     // .set-contrast-floor(@compare);

//     // this iterator does the work of finding the contrastful text
//     .apply-contrast(@contrast-ratio, @tone, @index)
//        when (@contrast-ratio < @standard) 
// 		and (@index < @iterations) { 
//         // this sets a new @contrast-ratio
//         .set-contrast-ratio(@compare, @contrast); 
//         // this runs the next iteration
// 		.apply-contrast(@contrast-ratio; @tone; @index + 1);
// 	}

//     // the actual CSS output for this whole mixin is this one line
// 	.apply-contrast(@contrast-ratio, @tone, @index) when (default()) {
//         @{property}: @contrast;
//     }

//     // this works like .set-tone if no mode is specified
//     .tone(@compare);
    
//     // output the property/rule
//     .apply-contrast(1, @tone, 1);
// }

.contrast(
        @property: color; 
        @compare: @white; 
        @mode: auto;
        ) {
            @contrast: .set-contrast(@compare, @mode)[];
            @{property}: @contrast;
}